{"version":3,"sources":["api/fetchData.js","App.js","index.js"],"names":["fetchWeatherData","query","a","Axios","get","params","q","units","APPID","data","App","useState","setQuery","weather","setWeather","search","e","key","trim","console","log","className","type","onChange","target","value","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAKaA,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACLC,IAAMC,IAJrB,kDAI8B,CAClCC,OAAQ,CACJC,EAAGL,EACHM,MAAO,SACPC,MAPE,sCAEkB,uBACpBC,EADoB,EACpBA,KADoB,kBASrBA,GATqB,2CAAH,sDC0CdC,EA5CH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTV,EADS,KACFW,EADE,OAEcD,mBAAS,IAFvB,mBAETE,EAFS,KAEAC,EAFA,KAGVC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACC,UAAVc,EAAEC,MAAmBhB,EAAMiB,OADlB,gCAEQlB,EAAiBC,GAFzB,OAELQ,EAFK,OAGXU,QAAQC,IAAIX,GACZK,EAAWL,GAJA,2CAAH,sDAQZ,OACE,yBAAKY,UAAU,kBACb,6BACE,2BACEC,KAAK,OACLD,UAAU,SACVE,SAAU,SAAAP,GAAC,OAAIJ,EAASI,EAAEQ,OAAOC,QACjCC,WAAYX,KAIdF,EAAQc,MAEN,yBAAKN,UAAU,QACb,yBAAKA,UAAU,aACb,8BAAOR,EAAQe,MACf,6BAAMf,EAAQgB,IAAIC,UAEpB,yBAAKT,UAAU,aACZU,KAAKC,MAAMnB,EAAQc,KAAKM,MACzB,uCAEF,yBAAKZ,UAAU,QACb,yBAAKA,UAAU,YAAYa,IAAG,4CAAuCrB,EAAQA,QAAQ,GAAGsB,KAA1D,WAAyEC,IAAKvB,EAAQA,QAAQ,GAAGwB,cAC/H,2BAAIxB,EAAQA,QAAQ,GAAGwB,iB,MChCrCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.2db6a309.chunk.js","sourcesContent":["import Axios from \"axios\"\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst API_KEY='16f203bbe97b88f26e209268d9886b9a';\r\n\r\nexport const fetchWeatherData = async (query) => {\r\n    const { data } = await Axios.get(URL, {\r\n        params: {\r\n            q: query,\r\n            units: 'metric',\r\n            APPID: API_KEY\r\n        }\r\n    });\r\n\r\n    return data;\r\n}","import React, { useState } from 'react';\nimport { fetchWeatherData } from './api/fetchData';\n\nconst App = () => {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const search = async (e) => {\n    if (e.key === 'Enter' && query.trim()) {\n      const data = await fetchWeatherData(query);\n      console.log(data);\n      setWeather(data);\n    }\n  }\n\n  return (\n    <div className='main-container'>\n      <div>\n        <input\n          type='text'\n          className='search'\n          onChange={e => setQuery(e.target.value)}\n          onKeyPress={search}\n        />\n      </div>\n      {\n        weather.main &&\n        (\n          <div className='city'>\n            <div className='city-name'>\n              <span>{weather.name}</span>\n              <sup>{weather.sys.country}</sup>\n            </div>\n            <div className='city-temp'>\n              {Math.round(weather.main.temp)}\n              <sup>&deg;C</sup>\n            </div>\n            <div className='info'>\n              <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\n              <p>{weather.weather[0].description}</p>\n            </div>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n"],"sourceRoot":""}